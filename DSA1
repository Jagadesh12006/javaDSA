# ARRAYS 

public class Main {
    public static void main(String[] args) {
        int a[] = {1,2,3,4,5,6,7,8,9,10};
        String b[] = {"Khan","Cyan","Yolo"};
        for(int i=0; i<5; i++) {
            System.out.println(a[i]);
        }
        for(int i=0; i<3; i++) {
            System.out.println(b[i]);
        }
    }
}
OUTPUT:
1
2
3
4
5
Khan
Cyan
Yolo
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# BUBBLE SORT

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int a[] = {23,12,3,76,9,1};
        System.out.println(Arrays.toString(a));                                           # O(n^2} => time complexity
        for (int i=0; i<a.length-1; i++){
            for (int j=0; j<a.length-1-i; j++){
                if (a[j] > a[j+1]){
                    int t = a[j];
                    a[j] = a[j+1];
                    a[j+1] = t;
                }
            }
        }
        System.out.println(Arrays.toString(a));
    }
}
OUTPUT:
[23, 12, 3, 76, 9, 1]
[1, 3, 9, 12, 23, 76]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# SELECTION SORT

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int a[] = {25,10,30,34,5};
        System.out.println("Given Array :"+ Arrays.toString(a));

        for (int i = 0; i < a.length-1; i++)
        {
            //To find minimum element index
            //Swap index element with minimum element
            int min = i;
            for (int j = i+1; j < a.length; j++)
            {
                if (a[j] < a[min])
                {
                    min = j;
                }
            }
            //Swapping (a[i], a[min])
            if (min != i) {
                int temp = a[i];
                a[i] = a[min];
                a[min] = temp;
            }
        }
        System.out.println("Sorted Array :"+ Arrays.toString(a));
    }
}
OUTPUT:
Given Array :[25, 10, 30, 34, 5]
Sorted Array :[5, 10, 25, 30, 34]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# LINEAR SEARCH                                        O(n) => time complexity

import java.util.Arrays;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        int a[] = {44,32,2,76,22,7};
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter element : ");
        int ele = scan.nextInt();
        int flag = 0;
        for (int i = 0; i < a.length; i++)
        {
            if (a[i] == ele)
            {
                System.out.println("Element found at index "+i);
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            System.out.println("Element not found");
        }
    }
}
OUTPUT:
Enter element : 
22
Element found at index 4
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# BINARY SEARCH                                              O(log n) => time complexity

import java.util.Arrays;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        int a[] = {1,2,3,4,5,6,7};
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter element : ");
        int ele = scan.nextInt();

        int lb = 0;
        int ub = a.length-1;
        int flag = 0;
        while (lb <= ub)
        {
            int mid = (lb+ub)/2;
            if (a[mid] == ele)
            {
                System.out.println("Element found at index "+ mid);
                flag = 1;
                break;
            }
            else if (a[mid] < ele)
            {
                lb = mid + 1;
            }
            else
            {
                ub = mid - 1;
            }
        }
        if (flag == 0)
        {
            System.out.println("Element not found");
        }


    }
}
OUTPUT;
Enter element : 
6
Element found at index 5
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# LINKED LIST CREATION AND INSERTION

import java.util.Arrays;
import java.util.*;
class Node{
    int data;
    Node next;
    Node (int data){
        this.data = data;
    }
}
class LinkedList{
    Node head,tail;
    public void insert(int data)
    {
        Node n1 = new Node(data);
        n1.next = null;

        if (head == null)      //Adhu dhan first node
        {
            head = n1;
            tail = n1;
        }
        else
        {
            tail.next = n1;
            tail = n1;
        }
    }
    public void display()
    {
        Node temp = head;
        while (temp.next != null)
        {
            System.out.println(temp.data);
            temp = temp.next;
        }
        System.out.println(temp.data);
    }

}
public class Main {
    public static void main(String[] args) {
        LinkedList l1 = new LinkedList();
        l1.insert(10);
        l1.insert(20);
        l1.insert(30);

        l1.display();
    }
}
OUTPUT:
10
20
30
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# LINKED LIST INSERTION AT BEGINING AND INSERTION AT SPECIFIC POSITION

import java.util.Arrays;
import java.util.*;
class Node{
    int data;
    Node next;
    Node (int data){
        this.data = data;
    }
}
class LinkedList{
    Node head,tail;
    public void insert(int data)
    {
        Node n1 = new Node(data);
        n1.next = null;

        if (head == null)      //Adhu dhan first node
        {
            head = n1;
            tail = n1;
        }
        else
        {
            tail.next = n1;
            tail = n1;
        }
    }
    public void display()
    {
        if (head == null)
        {
            System.out.println("List empty");
        }
        else
        {
            Node temp = head;
            while (temp.next != null)
            {
            System.out.println(temp.data);
            temp = temp.next;
            }
        System.out.println(temp.data);
        }
    }
    public void insertBeg(int data) {
        Node n1 = new Node(data);
        n1.next = head;
        head = n1;
    }
    public void insertAt(int pos, int data) {           // Insert at specified place
        Node n1 = new Node(data);
        Node temp = head;
        for (int i = 0; i < pos-1; i++)
        {
            temp = temp.next;
        }
        n1.next = temp.next;
        temp.next = n1;
    }

}
public class Main {
    public static void main(String[] args) {
        LinkedList l1 = new LinkedList();
        l1.insert(10);
        l1.insert(20);
        l1.insert(30);
        l1.insertBeg(5);
        l1.insertAt(3,25);
        l1.display();
    }
}
OUTPUT:
5
10
20
25
30
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# LINKED LIST DELETION AT BEGINING , END AND SPECIFIC POSITION

import java.util.Arrays;
import java.util.*;
class Node{
    int data;
    Node next;
    Node (int data){
        this.data = data;
    }
}
class LinkedList{
    Node head,tail;
    public void insert(int data)
    {
        Node n1 = new Node(data);
        n1.next = null;

        if (head == null)      //Adhu dhan first node
        {
            head = n1;
            tail = n1;
        }
        else
        {
            tail.next = n1;
            tail = n1;
        }
    }
    public void display()
    {
        if (head == null)
        {
            System.out.println("List empty");
        }
        else
        {
            Node temp = head;
            while (temp.next != null)
            {
            System.out.println(temp.data);
            temp = temp.next;
            }
        System.out.println(temp.data);
        }
    }
    public void insertBeg(int data) {
        Node n1 = new Node(data);
        n1.next = head;
        head = n1;
    }
    public void insertAt(int pos, int data) {           // Insert at specified place
        Node n1 = new Node(data);
        Node temp = head;
        for (int i = 0; i < pos-1; i++)
        {
            temp = temp.next;
        }
        n1.next = temp.next;
        temp.next = n1;
    }
    public void deletionAtBeg()
    {
        Node temp = head;
        head = head.next;
        temp.next = null;
    }
    public void deletionAtEnd() {
        Node temp = head;
        while (temp.next != tail)
        {
            temp = temp.next;
        }
        temp.next = null;
        tail = temp;
    }
    public void deletionAt(int pos) {
        Node temp = head;
        for( int i = 0; i < pos - 1; i++)
        {
            temp = temp.next;
        }
        temp.next = temp.next.next;

    }

}
public class Main {
    public static void main(String[] args) {
        LinkedList l1 = new LinkedList();
        l1.insert(10);
        l1.insert(20);
        l1.insert(30);
        l1.insert(40);
        l1.insertBeg(5);
        l1.insertAt(3,25);
        l1.display();
        l1.deletionAtBeg();
        System.out.println("After deletion at beginihg");
        l1.display();
        l1.deletionAtEnd();
        System.out.println("After deletion at end");
        l1.display();
        l1.deletionAt(2);
        System.out.println("After deletion at specified position");
        l1.display();
    }
}
OUTPUT:
5
10
20
25
30
40
After deletion at beginihg
10
20
25
30
40
After deletion at end
10
20
25
30
After deletion at specified position
10
20
30
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
